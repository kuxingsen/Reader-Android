package com.monk.reader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monk.reader.dao.model.StoryArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY_ARTICLE".
*/
public class StoryArticleDao extends AbstractDao<StoryArticle, Long> {

    public static final String TABLENAME = "STORY_ARTICLE";

    /**
     * Properties of entity StoryArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property IsNewRecord = new Property(2, boolean.class, "isNewRecord", false, "IS_NEW_RECORD");
        public final static Property CreateDate = new Property(3, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(4, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property FromPageNum = new Property(5, int.class, "fromPageNum", false, "FROM_PAGE_NUM");
        public final static Property ToPageNum = new Property(6, int.class, "toPageNum", false, "TO_PAGE_NUM");
        public final static Property ArtName = new Property(7, String.class, "artName", false, "ART_NAME");
        public final static Property ArtCode = new Property(8, String.class, "artCode", false, "ART_CODE");
        public final static Property ArtAuth = new Property(9, String.class, "artAuth", false, "ART_AUTH");
        public final static Property ArtUrl = new Property(10, String.class, "artUrl", false, "ART_URL");
        public final static Property NewChapterName = new Property(11, String.class, "newChapterName", false, "NEW_CHAPTER_NAME");
        public final static Property NewChapter = new Property(12, String.class, "newChapter", false, "NEW_CHAPTER");
        public final static Property ReadUrl = new Property(13, String.class, "readUrl", false, "READ_URL");
        public final static Property CateCode = new Property(14, String.class, "cateCode", false, "CATE_CODE");
        public final static Property ArtStat = new Property(15, String.class, "artStat", false, "ART_STAT");
        public final static Property ResName = new Property(16, String.class, "resName", false, "RES_NAME");
        public final static Property LastUpdate = new Property(17, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property IsFetch = new Property(18, String.class, "isFetch", false, "IS_FETCH");
        public final static Property CateName = new Property(19, String.class, "cateName", false, "CATE_NAME");
        public final static Property ReadCount = new Property(20, int.class, "readCount", false, "READ_COUNT");
    }


    public StoryArticleDao(DaoConfig config) {
        super(config);
    }
    
    public StoryArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY_ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT UNIQUE ," + // 1: id
                "\"IS_NEW_RECORD\" INTEGER NOT NULL ," + // 2: isNewRecord
                "\"CREATE_DATE\" TEXT," + // 3: createDate
                "\"UPDATE_DATE\" TEXT," + // 4: updateDate
                "\"FROM_PAGE_NUM\" INTEGER NOT NULL ," + // 5: fromPageNum
                "\"TO_PAGE_NUM\" INTEGER NOT NULL ," + // 6: toPageNum
                "\"ART_NAME\" TEXT," + // 7: artName
                "\"ART_CODE\" TEXT," + // 8: artCode
                "\"ART_AUTH\" TEXT," + // 9: artAuth
                "\"ART_URL\" TEXT," + // 10: artUrl
                "\"NEW_CHAPTER_NAME\" TEXT," + // 11: newChapterName
                "\"NEW_CHAPTER\" TEXT," + // 12: newChapter
                "\"READ_URL\" TEXT," + // 13: readUrl
                "\"CATE_CODE\" TEXT," + // 14: cateCode
                "\"ART_STAT\" TEXT," + // 15: artStat
                "\"RES_NAME\" TEXT," + // 16: resName
                "\"LAST_UPDATE\" TEXT," + // 17: lastUpdate
                "\"IS_FETCH\" TEXT," + // 18: isFetch
                "\"CATE_NAME\" TEXT," + // 19: cateName
                "\"READ_COUNT\" INTEGER NOT NULL );"); // 20: readCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY_ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoryArticle entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getIsNewRecord() ? 1L: 0L);
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(4, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(5, updateDate);
        }
        stmt.bindLong(6, entity.getFromPageNum());
        stmt.bindLong(7, entity.getToPageNum());
 
        String artName = entity.getArtName();
        if (artName != null) {
            stmt.bindString(8, artName);
        }
 
        String artCode = entity.getArtCode();
        if (artCode != null) {
            stmt.bindString(9, artCode);
        }
 
        String artAuth = entity.getArtAuth();
        if (artAuth != null) {
            stmt.bindString(10, artAuth);
        }
 
        String artUrl = entity.getArtUrl();
        if (artUrl != null) {
            stmt.bindString(11, artUrl);
        }
 
        String newChapterName = entity.getNewChapterName();
        if (newChapterName != null) {
            stmt.bindString(12, newChapterName);
        }
 
        String newChapter = entity.getNewChapter();
        if (newChapter != null) {
            stmt.bindString(13, newChapter);
        }
 
        String readUrl = entity.getReadUrl();
        if (readUrl != null) {
            stmt.bindString(14, readUrl);
        }
 
        String cateCode = entity.getCateCode();
        if (cateCode != null) {
            stmt.bindString(15, cateCode);
        }
 
        String artStat = entity.getArtStat();
        if (artStat != null) {
            stmt.bindString(16, artStat);
        }
 
        String resName = entity.getResName();
        if (resName != null) {
            stmt.bindString(17, resName);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(18, lastUpdate);
        }
 
        String isFetch = entity.getIsFetch();
        if (isFetch != null) {
            stmt.bindString(19, isFetch);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(20, cateName);
        }
        stmt.bindLong(21, entity.getReadCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoryArticle entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getIsNewRecord() ? 1L: 0L);
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(4, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(5, updateDate);
        }
        stmt.bindLong(6, entity.getFromPageNum());
        stmt.bindLong(7, entity.getToPageNum());
 
        String artName = entity.getArtName();
        if (artName != null) {
            stmt.bindString(8, artName);
        }
 
        String artCode = entity.getArtCode();
        if (artCode != null) {
            stmt.bindString(9, artCode);
        }
 
        String artAuth = entity.getArtAuth();
        if (artAuth != null) {
            stmt.bindString(10, artAuth);
        }
 
        String artUrl = entity.getArtUrl();
        if (artUrl != null) {
            stmt.bindString(11, artUrl);
        }
 
        String newChapterName = entity.getNewChapterName();
        if (newChapterName != null) {
            stmt.bindString(12, newChapterName);
        }
 
        String newChapter = entity.getNewChapter();
        if (newChapter != null) {
            stmt.bindString(13, newChapter);
        }
 
        String readUrl = entity.getReadUrl();
        if (readUrl != null) {
            stmt.bindString(14, readUrl);
        }
 
        String cateCode = entity.getCateCode();
        if (cateCode != null) {
            stmt.bindString(15, cateCode);
        }
 
        String artStat = entity.getArtStat();
        if (artStat != null) {
            stmt.bindString(16, artStat);
        }
 
        String resName = entity.getResName();
        if (resName != null) {
            stmt.bindString(17, resName);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(18, lastUpdate);
        }
 
        String isFetch = entity.getIsFetch();
        if (isFetch != null) {
            stmt.bindString(19, isFetch);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(20, cateName);
        }
        stmt.bindLong(21, entity.getReadCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StoryArticle readEntity(Cursor cursor, int offset) {
        StoryArticle entity = new StoryArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getShort(offset + 2) != 0, // isNewRecord
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateDate
            cursor.getInt(offset + 5), // fromPageNum
            cursor.getInt(offset + 6), // toPageNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // artName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // artCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // artAuth
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // artUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // newChapterName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // newChapter
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // readUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cateCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // artStat
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // resName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lastUpdate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // isFetch
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // cateName
            cursor.getInt(offset + 20) // readCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoryArticle entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsNewRecord(cursor.getShort(offset + 2) != 0);
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromPageNum(cursor.getInt(offset + 5));
        entity.setToPageNum(cursor.getInt(offset + 6));
        entity.setArtName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArtCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setArtAuth(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArtUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNewChapterName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNewChapter(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReadUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCateCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setArtStat(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setResName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLastUpdate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsFetch(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCateName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReadCount(cursor.getInt(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoryArticle entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoryArticle entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoryArticle entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
