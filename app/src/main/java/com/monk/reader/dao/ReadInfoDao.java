package com.monk.reader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monk.reader.dao.bean.ReadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READ_INFO".
*/
public class ReadInfoDao extends AbstractDao<ReadInfo, Long> {

    public static final String TABLENAME = "READ_INFO";

    /**
     * Properties of entity ReadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, Long.class, "bookId", false, "BOOK_ID");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookAuthor = new Property(3, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property BookSize = new Property(4, Long.class, "bookSize", false, "BOOK_SIZE");
        public final static Property BookIntroduction = new Property(5, String.class, "bookIntroduction", false, "BOOK_INTRODUCTION");
        public final static Property BookPicture = new Property(6, String.class, "bookPicture", false, "BOOK_PICTURE");
        public final static Property CategoryName = new Property(7, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Start = new Property(8, Long.class, "start", false, "START");
        public final static Property Duration = new Property(9, Long.class, "duration", false, "DURATION");
        public final static Property UpdateTime = new Property(10, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UserId = new Property(11, Long.class, "userId", false, "USER_ID");
    }


    public ReadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ReadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_ID\" INTEGER," + // 1: bookId
                "\"BOOK_NAME\" TEXT," + // 2: bookName
                "\"BOOK_AUTHOR\" TEXT," + // 3: bookAuthor
                "\"BOOK_SIZE\" INTEGER," + // 4: bookSize
                "\"BOOK_INTRODUCTION\" TEXT," + // 5: bookIntroduction
                "\"BOOK_PICTURE\" TEXT," + // 6: bookPicture
                "\"CATEGORY_NAME\" TEXT," + // 7: categoryName
                "\"START\" INTEGER," + // 8: start
                "\"DURATION\" INTEGER," + // 9: duration
                "\"UPDATE_TIME\" INTEGER," + // 10: updateTime
                "\"USER_ID\" INTEGER);"); // 11: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(2, bookId);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
 
        Long bookSize = entity.getBookSize();
        if (bookSize != null) {
            stmt.bindLong(5, bookSize);
        }
 
        String bookIntroduction = entity.getBookIntroduction();
        if (bookIntroduction != null) {
            stmt.bindString(6, bookIntroduction);
        }
 
        String bookPicture = entity.getBookPicture();
        if (bookPicture != null) {
            stmt.bindString(7, bookPicture);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(8, categoryName);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(9, start);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(10, duration);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(12, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(2, bookId);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
 
        Long bookSize = entity.getBookSize();
        if (bookSize != null) {
            stmt.bindLong(5, bookSize);
        }
 
        String bookIntroduction = entity.getBookIntroduction();
        if (bookIntroduction != null) {
            stmt.bindString(6, bookIntroduction);
        }
 
        String bookPicture = entity.getBookPicture();
        if (bookPicture != null) {
            stmt.bindString(7, bookPicture);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(8, categoryName);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(9, start);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(10, duration);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(12, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadInfo readEntity(Cursor cursor, int offset) {
        ReadInfo entity = new ReadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookAuthor
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // bookSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookIntroduction
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bookPicture
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // categoryName
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // start
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // duration
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // updateTime
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBookName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setBookIntroduction(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookPicture(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCategoryName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStart(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDuration(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setUserId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
