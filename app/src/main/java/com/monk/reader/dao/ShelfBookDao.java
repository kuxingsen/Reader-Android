package com.monk.reader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monk.reader.dao.bean.ShelfBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHELF_BOOK".
*/
public class ShelfBookDao extends AbstractDao<ShelfBook, Long> {

    public static final String TABLENAME = "SHELF_BOOK";

    /**
     * Properties of entity ShelfBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Begin = new Property(3, Long.class, "begin", false, "BEGIN");
        public final static Property Charset = new Property(4, String.class, "charset", false, "CHARSET");
        public final static Property Position = new Property(5, Integer.class, "position", false, "POSITION");
        public final static Property BookLen = new Property(6, Long.class, "bookLen", false, "BOOK_LEN");
        public final static Property Form = new Property(7, String.class, "form", false, "FORM");
    }

    private DaoSession daoSession;


    public ShelfBookDao(DaoConfig config) {
        super(config);
    }
    
    public ShelfBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHELF_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"BEGIN\" INTEGER," + // 3: begin
                "\"CHARSET\" TEXT," + // 4: charset
                "\"POSITION\" INTEGER," + // 5: position
                "\"BOOK_LEN\" INTEGER," + // 6: bookLen
                "\"FORM\" TEXT);"); // 7: form
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHELF_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShelfBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        Long begin = entity.getBegin();
        if (begin != null) {
            stmt.bindLong(4, begin);
        }
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(5, charset);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(6, position);
        }
 
        Long bookLen = entity.getBookLen();
        if (bookLen != null) {
            stmt.bindLong(7, bookLen);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(8, form);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShelfBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        Long begin = entity.getBegin();
        if (begin != null) {
            stmt.bindLong(4, begin);
        }
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(5, charset);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(6, position);
        }
 
        Long bookLen = entity.getBookLen();
        if (bookLen != null) {
            stmt.bindLong(7, bookLen);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(8, form);
        }
    }

    @Override
    protected final void attachEntity(ShelfBook entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShelfBook readEntity(Cursor cursor, int offset) {
        ShelfBook entity = new ShelfBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // begin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // charset
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // bookLen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // form
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShelfBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBegin(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCharset(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBookLen(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setForm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShelfBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShelfBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShelfBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
