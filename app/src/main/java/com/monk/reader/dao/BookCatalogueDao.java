package com.monk.reader.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.monk.reader.dao.bean.BookCatalogue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_CATALOGUE".
*/
public class BookCatalogueDao extends AbstractDao<BookCatalogue, Long> {

    public static final String TABLENAME = "BOOK_CATALOGUE";

    /**
     * Properties of entity BookCatalogue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookCatalogue = new Property(1, String.class, "bookCatalogue", false, "BOOK_CATALOGUE");
        public final static Property BookCatalogueStartPos = new Property(2, long.class, "bookCatalogueStartPos", false, "BOOK_CATALOGUE_START_POS");
        public final static Property BookId = new Property(3, Long.class, "bookId", false, "BOOK_ID");
    }

    private Query<BookCatalogue> shelfBook_BookCatalogueListQuery;

    public BookCatalogueDao(DaoConfig config) {
        super(config);
    }
    
    public BookCatalogueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_CATALOGUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_CATALOGUE\" TEXT," + // 1: bookCatalogue
                "\"BOOK_CATALOGUE_START_POS\" INTEGER NOT NULL ," + // 2: bookCatalogueStartPos
                "\"BOOK_ID\" INTEGER);"); // 3: bookId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_CATALOGUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookCatalogue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookCatalogue = entity.getBookCatalogue();
        if (bookCatalogue != null) {
            stmt.bindString(2, bookCatalogue);
        }
        stmt.bindLong(3, entity.getBookCatalogueStartPos());
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(4, bookId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookCatalogue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookCatalogue = entity.getBookCatalogue();
        if (bookCatalogue != null) {
            stmt.bindString(2, bookCatalogue);
        }
        stmt.bindLong(3, entity.getBookCatalogueStartPos());
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(4, bookId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookCatalogue readEntity(Cursor cursor, int offset) {
        BookCatalogue entity = new BookCatalogue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookCatalogue
            cursor.getLong(offset + 2), // bookCatalogueStartPos
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // bookId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookCatalogue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookCatalogue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookCatalogueStartPos(cursor.getLong(offset + 2));
        entity.setBookId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookCatalogue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookCatalogue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookCatalogue entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bookCatalogueList" to-many relationship of ShelfBook. */
    public List<BookCatalogue> _queryShelfBook_BookCatalogueList(Long bookId) {
        synchronized (this) {
            if (shelfBook_BookCatalogueListQuery == null) {
                QueryBuilder<BookCatalogue> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookId.eq(null));
                shelfBook_BookCatalogueListQuery = queryBuilder.build();
            }
        }
        Query<BookCatalogue> query = shelfBook_BookCatalogueListQuery.forCurrentThread();
        query.setParameter(0, bookId);
        return query.list();
    }

}
